(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("es6-promise"), require("soap"), require("chai"), require("sinon"), require("sinon-chai"), require("mocha"), require("../rc-sdk"));
	else if(typeof define === 'function' && define.amd)
		define(["es6-promise", "soap", "chai", "sinon", "sinon-chai", "mocha", "../rc-sdk"], factory);
	else if(typeof exports === 'object')
		exports["RCSDK"] = factory(require("es6-promise"), require("soap"), require("chai"), require("sinon"), require("sinon-chai"), require("mocha"), require("../rc-sdk"));
	else
		root["RCSDK"] = factory(root["Promise"], root["soap"], root["chai"], root["sinon"], root["sinonChai"], root["mocha"], root["RCSDK"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_41__, __WEBPACK_EXTERNAL_MODULE_49__, __WEBPACK_EXTERNAL_MODULE_51__, __WEBPACK_EXTERNAL_MODULE_52__, __WEBPACK_EXTERNAL_MODULE_53__, __WEBPACK_EXTERNAL_MODULE_54__, __WEBPACK_EXTERNAL_MODULE_55__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

__webpack_require__(45);
__webpack_require__(56);
module.exports = __webpack_require__(46);


/***/ },

/***/ 41:
/***/ function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_41__;

/***/ },

/***/ 45:
/***/ function(module, exports, __webpack_require__) {

/// <reference path="../../typings/externals.d.ts" />
exports.mocha = __webpack_require__(46);
var expect = exports.mocha.chai.expect;
var spy = exports.mocha.sinon.spy;
var rcsdk = exports.mocha.rcsdk;
var accountGenerator = exports.mocha.accountGenerator;
var accountGeneratorHelper = exports.mocha.accountGeneratorHelper;
describe('RCSDK.core.Plafrorm', function () {
    var platform = rcsdk.getPlatform();
    this.timeout(5000);
    describe('authorize', function () {
        accountGeneratorHelper.registerHooks(this, 'platform_messages', 1, false);
        it('authorizes with right credentials', function (done) {
            platform
                .authorize({
                username: this.accounts[0].mainPhoneNumber,
                password: this.accounts[0].password
            })
                .then(function (ajax) {
                expect(ajax.data).to.have.property('access_token').to.be.ok;
                done();
            })
                .catch(function (e) {
                done(e);
            });
        });
        it('fails to authorize with wrong data', function (done) {
            platform
                .authorize({
                username: this.accounts[0].mainPhoneNumber,
                password: this.accounts[0].password + '-random-stuff'
            })
                .then(function (ajax) {
                done(new Error('This should not be reached'));
            })
                .catch(function (e) {
                expect(e.message).to.be.equal('Invalid resource owner credentials.');
                done();
            });
        });
    });
});


/***/ },

/***/ 46:
/***/ function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/// <reference path="../typings/externals.d.ts" />
if (!process.env.RCSDK_API_SERVER)
    throw new Error('Process.env.RCSDK_API_SERVER is undefined');
if (!process.env.RCSDK_API_KEY)
    throw new Error('Process.env.RCSDK_API_KEY is undefined');
var ag = __webpack_require__(48);
var agh = __webpack_require__(50);
exports.chai = __webpack_require__(51);
exports.sinon = __webpack_require__(52);
exports.sinonChai = __webpack_require__(53);
exports.mocha = __webpack_require__(54);
exports.RCSDK = __webpack_require__(55);
exports.rcsdk = new exports.RCSDK({
    server: process.env.RCSDK_API_SERVER,
    appKey: 'whatever',
    appSecret: 'whatever'
});
exports.rcsdk.getPlatform().apiKey = process.env.RCSDK_API_KEY;
exports.chai.use(exports.sinonChai);
exports.accountGenerator = new ag.AccountGenerator(process.env.RCSDK_AGS_SERVER);
exports.accountGeneratorHelper = new agh.AccountGeneratorHelper(exports.accountGenerator, process.env.RCSDK_AGS_DBNAME);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(47)))

/***/ },

/***/ 47:
/***/ function(module, exports) {

// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            currentQueue[queueIndex].run();
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ },

/***/ 48:
/***/ function(module, exports, __webpack_require__) {

/// <reference path="../../typings/externals.d.ts" />
var promise = __webpack_require__(41);
var soap = __webpack_require__(49);
var Promise = promise.Promise;
var AccountGenerator = (function () {
    /**
     * @name AccountGenerator
     * @param {string} server
     * @constructor
     */
    function AccountGenerator(server) {
        if (!server)
            throw new Error('Server is not defined');
        this.server = server;
        this.client = null;
        this.connectionPromise = null;
    }
    AccountGenerator.prototype.ensureClient = function () {
        if (!this.client)
            throw new Error('Client is not connected');
        return this;
    };
    AccountGenerator.prototype.connect = function () {
        var self = this;
        if (this.client) {
            console.info('AccountGenerator: Client already has connection');
            return this.connectionPromise;
        }
        this.connectionPromise = new Promise(function (resolve, reject) {
            var url = self.server + '/ags/ws?wsdl';
            console.log('Connecting to', url);
            soap.createClient(url, function (e, cl) {
                console.info('AccountGenerator: SOAP has been connected', e && e.message || '');
                if (e)
                    throw e;
                self.client = cl;
                resolve(self.client);
            });
        });
        return this.connectionPromise;
    };
    AccountGenerator.prototype.getAndLock = function (config) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.ensureClient();
            if (!config.dbName)
                throw new Error('No dbName specified');
            if (!config.scenario)
                throw new Error('No scenario specified');
            if (!config.accountCount)
                throw new Error('No accountCount specified');
            config.accountCount = config.accountCount.toString();
            _this.client.getAndLock(config, function (e, result) {
                if (e)
                    throw e;
                var accounts = result.accounts.account.length ? result.accounts.account : [result.accounts.account];
                resolve(accounts);
            });
        });
    };
    AccountGenerator.prototype.release = function (config) {
        var _this = this;
        return new promise.Promise(function (resolve, reject) {
            _this.ensureClient();
            if (!config.dbName)
                throw new Error('No dbName specified');
            if (!config.rcUserIds)
                throw new Error('No scenario specified');
            config.modified = config.modified ? 'true' : 'false';
            if (Array.isArray(config.rcUserIds))
                config.rcUserIds = config.rcUserIds.join(','); //TODO This may not work
            _this.client.release(config, function (e, result) {
                if (e)
                    throw e;
                resolve(result);
            });
        });
    };
    return AccountGenerator;
})();
exports.AccountGenerator = AccountGenerator;


/***/ },

/***/ 49:
/***/ function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_49__;

/***/ },

/***/ 50:
/***/ function(module, exports) {

var AccountGeneratorHelper = (function () {
    function AccountGeneratorHelper(accountGenerator, dbName) {
        this.registerHooks = function (suite, scenario, count, modified) {
            if (!count)
                count = 1;
            var self = this;
            suite.beforeEach(function (done) {
                var test = this;
                test.accounts = [];
                self.accountGenerator
                    .connect()
                    .then(function (client) {
                    return self.accountGenerator.getAndLock({
                        dbName: self.dbName,
                        scenario: 'platform_messages',
                        accountCount: count
                    });
                })
                    .then(function (accounts) {
                    /** @type {IAccount[]} */
                    test.accounts = accounts;
                    console.info('Accounts acquired', test.accounts.map(function (account) {
                        return account.mainPhoneNumber + ':' + account.password;
                    }).join(', '));
                    done();
                })
                    .catch(done);
            });
            suite.afterEach(function (done) {
                var test = this;
                if (test.accounts.length == 0) {
                    console.info('Nothing to release');
                    return done();
                }
                self.accountGenerator
                    .release({
                    dbName: self.dbName,
                    rcUserIds: test.accounts.map(function (account) {
                        return account.userId;
                    }),
                    modified: modified
                })
                    .then(function (result) {
                    console.info('Accounts released');
                    done();
                })
                    .catch(done);
            });
        };
        if (!accountGenerator)
            throw new Error('No accountGenerator specified');
        if (!dbName)
            throw new Error('No dbname specified');
        this.accountGenerator = accountGenerator;
        this.dbName = dbName;
    }
    return AccountGeneratorHelper;
})();
exports.AccountGeneratorHelper = AccountGeneratorHelper;


/***/ },

/***/ 51:
/***/ function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_51__;

/***/ },

/***/ 52:
/***/ function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_52__;

/***/ },

/***/ 53:
/***/ function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_53__;

/***/ },

/***/ 54:
/***/ function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_54__;

/***/ },

/***/ 55:
/***/ function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_55__;

/***/ },

/***/ 56:
/***/ function(module, exports, __webpack_require__) {

/// <reference path="../../typings/externals.d.ts" />
exports.mocha = __webpack_require__(46);
var expect = exports.mocha.chai.expect;
var spy = exports.mocha.sinon.spy;
var rcsdk = exports.mocha.rcsdk;
var accountGenerator = exports.mocha.accountGenerator;
var accountGeneratorHelper = exports.mocha.accountGeneratorHelper;
describe('RCSDK.helpers.Message', function () {
    var platform = rcsdk.getPlatform(), Message = rcsdk.getMessageHelper(), PhoneNumber = rcsdk.getPhoneNumberHelper();
    this.timeout(5000);
    describe('saveRequest', function () {
        accountGeneratorHelper.registerHooks(this, 'platform_messages', 1, false);
        it('sends message', function (done) {
            platform
                .authorize({
                username: this.accounts[0].mainPhoneNumber,
                password: this.accounts[0].password
            })
                .then(function (ajax) {
                return platform.apiCall({
                    url: PhoneNumber.createUrl({ extensionId: '~' }),
                    get: { perPage: 'max' }
                });
            })
                .then(function (numbersAjax) {
                return numbersAjax.data.records.filter(PhoneNumber.filter({
                    type: 'Sms'
                }))[0];
            })
                .then(function (number) {
                if (!number)
                    throw new Error('No SMS-enabled phone numbers');
                return platform.apiCall({
                    method: 'POST',
                    url: Message.createUrl({ sms: true }),
                    post: {
                        from: number.phoneNumber,
                        to: number.phoneNumber,
                        text: 'foo'
                    }
                });
            })
                .then(function (messageAjax) {
                expect(messageAjax.data.subject).to.equal('foo');
            })
                .catch(done);
        });
    });
});


/***/ }

/******/ })
});
;
//# sourceMappingURL=specs-api.js.map